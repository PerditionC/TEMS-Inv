<!--
The MIT License (MIT)

Copyright (c) 2009-2016 David Wendland

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Controls="clr-namespace:DW.WPFToolkit.Controls"
                    xmlns:Converters="clr-namespace:DW.WPFToolkit.Converters">

    <Converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />

    <Style TargetType="{x:Type Controls:DockingPane}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:DockingPane}">
                    <DockPanel>
                        <StackPanel Orientation="Horizontal" IsItemsHost="True" RenderTransformOrigin="0.5, 0.5" x:Name="PART_ButtonPane">
                            <StackPanel.LayoutTransform>
                                <RotateTransform Angle="90" />
                            </StackPanel.LayoutTransform>
                        </StackPanel>

                        <Controls:Resizer x:Name="PART_Resizer"
                                          FrameSizes="0,0,4,0"
                                          Visibility="{Binding SelectedContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToVisibilityConverter}}"
                                          Width="{TemplateBinding AreaWidth}"
                                          MinWidth="{TemplateBinding AreaMinWidth}"
                                          MaxWidth="{TemplateBinding AreaMaxWidth}"
                                          Height="{TemplateBinding AreaHeight}"
                                          MinHeight="{TemplateBinding AreaMinHeight}"
                                          MaxHeight="{TemplateBinding AreaMaxHeight}">
                            <ContentPresenter ContentSource="SelectedContent" />
                        </Controls:Resizer>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ExpandDirection" Value="TopToDown">
                            <Setter TargetName="PART_ButtonPane" Property="LayoutTransform" Value="{x:Null}" />
                            <Setter TargetName="PART_Resizer" Property="FrameSizes" Value="0,0,0,4" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="BottomToUp">
                            <Setter TargetName="PART_ButtonPane" Property="LayoutTransform" Value="{x:Null}" />
                            <Setter TargetName="PART_Resizer" Property="FrameSizes" Value="0,4,0,0" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="RightToLeft">
                            <Setter TargetName="PART_Resizer" Property="FrameSizes" Value="4,0,0,0" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ExpandDirection" Value="TopToDown" />
                                <Condition Property="ButtonsPosition" Value="Inner" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ButtonPane" Property="DockPanel.Dock" Value="Bottom" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ExpandDirection" Value="TopToDown" />
                                <Condition Property="ButtonsPosition" Value="Outher" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ButtonPane" Property="DockPanel.Dock" Value="Top" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ExpandDirection" Value="RightToLeft" />
                                <Condition Property="ButtonsPosition" Value="Inner" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ButtonPane" Property="DockPanel.Dock" Value="Left" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ExpandDirection" Value="RightToLeft" />
                                <Condition Property="ButtonsPosition" Value="Outher" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ButtonPane" Property="DockPanel.Dock" Value="Right" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ExpandDirection" Value="BottomToUp" />
                                <Condition Property="ButtonsPosition" Value="Inner" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ButtonPane" Property="DockPanel.Dock" Value="Top" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ExpandDirection" Value="BottomToUp" />
                                <Condition Property="ButtonsPosition" Value="Outher" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ButtonPane" Property="DockPanel.Dock" Value="Bottom" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ExpandDirection" Value="LeftToRight" />
                                <Condition Property="ButtonsPosition" Value="Inner" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ButtonPane" Property="DockPanel.Dock" Value="Right" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ExpandDirection" Value="LeftToRight" />
                                <Condition Property="ButtonsPosition" Value="Outher" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ButtonPane" Property="DockPanel.Dock" Value="Left" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Controls:DockingPaneItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:DockingPaneItem}">
                    <Controls:PaneToggleButton IsChecked="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter ContentSource="Header" />
                    </Controls:PaneToggleButton>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type Controls:PaneToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Background" Value="LightGray" />
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="5,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:PaneToggleButton}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="LightBlue" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="LightGreen" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
