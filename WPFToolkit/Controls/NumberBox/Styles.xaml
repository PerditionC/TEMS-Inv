<!--
The MIT License (MIT)

Copyright (c) 2009-2016 David Wendland

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE
-->
    
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:Controls="clr-namespace:DW.WPFToolkit.Controls"
                    xmlns:Converters="clr-namespace:DW.WPFToolkit.Converters">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <Converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />

    <Style TargetType="{x:Type Controls:UpDownButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:UpDownButton}">
                    <Grid Background="Transparent">
                        <Path StrokeThickness="1" x:Name="arrow" Fill="Black" Margin="2" HorizontalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Direction" Value="Up">
                            <Setter TargetName="arrow" Property="Data" Value="M 0,4 L 4,0 L 8,4 L 0,4" />
                        </Trigger>
                        <Trigger Property="Direction" Value="Down">
                            <Setter TargetName="arrow" Property="Data" Value="M 0,0 L 4,4 L 8,0 L 0,0" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="arrow" Property="Fill" Value="Gray" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Controls:NumberResetButton}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:NumberResetButton}">
                    <Border Background="{TemplateBinding Background}" Width="18">
                        <Grid Width="16">
                            <Path VerticalAlignment="Center"
                                  Data="M6.2500001,0.25 L9.75,0.25 9.75,6.25 15.75,6.25 15.75,9.75 9.75,9.75 9.75,15.75 6.2500001,15.75 6.2500001,9.75 0.25,9.75 0.25,6.25 6.2500001,6.25 z"
                                  HorizontalAlignment="Center"
                                  Stretch="Fill"
                                  Stroke="White"
                                  StrokeThickness="0.5"
                                  Height="10.5"
                                  Width="10.5"
                                  RenderTransformOrigin="0.5,0.5"
                                  Fill="{TemplateBinding Foreground}">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="45"/>
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FFEAF6FD" Offset="0.029"/>
                                        <GradientStop Color="#FFD7EFFC" Offset="0.496"/>
                                        <GradientStop Color="#FFBDE6FD" Offset="0.504"/>
                                        <GradientStop Color="#FFA9DAF5" Offset="0.971"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FFC2E4F6" Offset="0.5"/>
                                        <GradientStop Color="#FFA9D9F2" Offset="0.507"/>
                                        <GradientStop Color="#FF95CEEC" Offset="0.978"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Controls:NumberUnitLabel}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Padding" Value="0,0,2,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="{x:Type Controls:NumberCheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    
    <Style TargetType="{x:Type Controls:NumberBox}">
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0,20" MappingMode="Absolute" StartPoint="0,0">
                    <GradientStop Color="#ABADB3" Offset="0.05" />
                    <GradientStop Color="#E2E3EA" Offset="0.07" />
                    <GradientStop Color="#E3E9EF" Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:NumberBox}">
                    <Microsoft_Windows_Themes:ListBoxChrome x:Name="Bd"
                                                            BorderBrush="{TemplateBinding BorderBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}"
                                                            Background="{TemplateBinding Background}"
                                                            RenderMouseOver="{TemplateBinding IsMouseOver}"
                                                            RenderFocused="{TemplateBinding IsKeyboardFocusWithin}"
                                                            SnapsToDevicePixels="true">
                        <DockPanel>
                            <Controls:NumberResetButton x:Name="PART_ResetButton"
                                                        DockPanel.Dock="{TemplateBinding ResetButtonPosition}"
                                                        Visibility="{TemplateBinding HasResetButton, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                        AutomationProperties.AutomationId="CUI_ResetButton" />
                            
                            <Controls:NumberCheckBox x:Name="PART_CheckBox"
                                                     DockPanel.Dock="{TemplateBinding CheckBoxPosition}"
                                                     VerticalAlignment="Center"
                                                     IsChecked="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                     Visibility="{TemplateBinding HasCheckBox, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                     AutomationProperties.AutomationId="CUI_CheckBox" />
                            
                            <StackPanel DockPanel.Dock="{TemplateBinding UpDownButtonsPosition}"
                                        VerticalAlignment="Center"
                                        Visibility="Collapsed"
                                        x:Name="PART_UpDownButtons">
                                <Controls:UpDownButton Direction="Up" x:Name="PART_UpButton" Focusable="False" AutomationProperties.AutomationId="CUI_UpButton" />
                                <Controls:UpDownButton Direction="Down" x:Name="PART_DownButton" Focusable="False" AutomationProperties.AutomationId="CUI_DownButton" />
                            </StackPanel>
                            
                            <Controls:NumberUnitLabel x:Name="PART_UnitLabel"
                                                      DockPanel.Dock="{TemplateBinding UnitPosition}"
                                                      VerticalAlignment="Center"
                                                      Content="{TemplateBinding Unit}"
                                                      Visibility="{TemplateBinding Unit, Converter={StaticResource NullToVisibilityConverter}}"
                                                      AutomationProperties.AutomationId="CUI_UnitLabel" />
                            
                            <TextBox BorderThickness="0"
                                     x:Name="PART_TextBox"
                                     IsReadOnly="{TemplateBinding IsReadOnly}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     AutomationProperties.AutomationId="CUI_TextBox" />
                        
                        </DockPanel>
                    </Microsoft_Windows_Themes:ListBoxChrome>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CheckBoxBehavior" Value="DisableIfChecked" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_UnitLabel" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_TextBox" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_UpButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_DownButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_ResetButton" Property="IsEnabled" Value="False" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CheckBoxBehavior" Value="EnableIfChecked" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_UnitLabel" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_TextBox" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_UpButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_DownButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_ResetButton" Property="IsEnabled" Value="False" />
                        </MultiTrigger>
                        <Trigger Property="CanStepUp" Value="False">
                            <Setter TargetName="PART_UpButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="CanStepDown" Value="False">
                            <Setter TargetName="PART_DownButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="CanReset" Value="False">
                            <Setter TargetName="PART_ResetButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="UpDownBehavior" Value="Buttons">
                            <Setter TargetName="PART_UpDownButtons" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="UpDownBehavior" Value="ArrowsAndButtons">
                            <Setter TargetName="PART_UpDownButtons" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="PART_UpButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_DownButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>