<views:BasicWindowBase x:Class="TEMS_Inventory.views.GeneralInventoryManagementWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:inventoryModel="clr-namespace:TEMS.InventoryModel.entity.db;assembly=InventoryModel"
    xmlns:dbQuery="clr-namespace:TEMS.InventoryModel.entity.db.query;assembly=InventoryModel"
    xmlns:WPFToolkit="clr-namespace:DW.WPFToolkit.Controls;assembly=WPFToolkit"
    xmlns:WPFConverters="clr-namespace:DW.WPFToolkit.Converters;assembly=WPFToolkit"
    xmlns:views="clr-namespace:TEMS_Inventory.views"
    xmlns:uc="clr-namespace:TEMS_Inventory.UserControls"
    mc:Ignorable="d"
    Icon="{StaticResource LogoImage}"
    Title="General Inventory Management"
    WindowStartupLocation="CenterOwner"
    MinHeight="480" MinWidth="640"
    Height="{Binding Source={x:Static SystemParameters.MaximizedPrimaryScreenHeight}, Converter={WPFConverters:RatioConverter}, ConverterParameter='0.9'}" 
    >
    <Window.Width>
        <MultiBinding Converter="{WPFConverters:RatioConverter}">
            <Binding Source="{x:Static SystemParameters.MaximizedPrimaryScreenWidth}" />
            <Binding Source="0.9" />
            <Binding Source="1024.0" />
        </MultiBinding>
    </Window.Width>
    <Window.Resources>
        <WPFConverters:AndMultiValueConverter x:Key="AndMultiValueConverter" />
    </Window.Resources>

    <DockPanel Background="OldLace" x:Name="rootItem">
        <uc:ItemSearchFilter x:Name="isf" DockPanel.Dock="Top" Margin="2" DataContext="{Binding SearchFilterOptions}" />

        <!--  change so left is treeview, on select item open in right side for details
        Note: no add or delete as that is done on Item view (since effects all sites)
        bottom of details are buttons to mark item as damaged, missing, service, deploy, expiration
        next to item # and description is button to edit items [if admin] -->
        <Grid >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="3" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <DockPanel Grid.Column="0" Grid.Row="0"  Margin="3,2,2,3" >
                <StackPanel Orientation="Vertical" HorizontalAlignment="Stretch" DockPanel.Dock="Bottom">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="3" >
                        <RadioButton Name="SwitchViewSearch" Content="Search results" IsChecked="True"/>
                        <RadioButton Name="SwitchViewDetails" Content="Item description" IsChecked="False" Margin="10,0" />
                    </StackPanel>
                </StackPanel>

                <Grid MinHeight="100" MinWidth="50">
                    <DockPanel Visibility="{Binding IsChecked, ElementName=SwitchViewSearch, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <StackPanel Orientation="Vertical" HorizontalAlignment="Stretch" DockPanel.Dock="Bottom" >
                            <CheckBox HorizontalAlignment="Center" Margin="3" Content="{Binding SearchResult.ExpandCollapseCommandText}" IsThreeState="False" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}, Mode=OneWay}" Command="{Binding SearchResult.ExpandCollapseCommand}" Visibility="{Binding SearchFilterOptions.SearchFilter.SearchFilterVisible,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                            <TextBlock x:Name="StatusBar" HorizontalAlignment="Stretch" Margin="10,0,10,2" Text="{Binding Details.StatusMessage, Converter={StaticResource NullableToEmptyStringConverter}}"  Height="22" Opacity="0.9" />
                        </StackPanel>
                        <uc:ItemSearchResults x:Name="DisplayItemList" DataContext="{Binding SearchResult}" />
                    </DockPanel>

                    <!-- readonly view of item and itemtype -->
                    <Border Visibility=
                        "{Binding IsChecked, ElementName=SwitchViewDetails, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <GroupBox Header="Item:" Margin="3" DataContext="{Binding Details.item}">
                            <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" >
                                <WPFToolkit:TitledItemsControl Margin="2,10,2,2" >
                                    <WPFToolkit:TitledItem Title="Type:" IsEnabled="False">
                                        <TextBox Text="{Binding itemType.name, Mode=OneWay}" IsReadOnly="True" ToolTip="Identifies what the item is" />
                                    </WPFToolkit:TitledItem>
                                    <WPFToolkit:TitledItem Title="" IsEnabled="False" Margin="0,5">
                                        <StackPanel Orientation="Horizontal">
                                            <CheckBox IsChecked="{Binding itemType.isBin, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" IsThreeState="False" Content="Bin" IsEnabled="False" Margin="0,0,20,0" />
                                            <CheckBox IsChecked="{Binding itemType.isModule, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" IsThreeState="False" Content="Module" IsEnabled="False" Margin="0,0,20,0" />
                                        </StackPanel>
                                    </WPFToolkit:TitledItem>
                                    <WPFToolkit:TitledItem Title="Make:" IsEnabled="False">
                                        <TextBox Text="{Binding itemType.make, Mode=OneWay}" IsReadOnly="True" ToolTip="Make of this item, leave blank if not applicable" />
                                    </WPFToolkit:TitledItem>
                                    <WPFToolkit:TitledItem Title="Model:" IsEnabled="False">
                                        <TextBox Text="{Binding itemType.model, Mode=OneWay}" IsReadOnly="True" ToolTip="Model of this item, leave blank if not applicable" />
                                    </WPFToolkit:TitledItem>

                                    <WPFToolkit:TitledItem Title="Within:" Margin="0,13,0,0" >
                                        <TextBox Text="{Binding parent.itemType.name, Mode=OneWay}" IsReadOnly="True" ToolTip="bin or module that contains this item" />
                                    </WPFToolkit:TitledItem>
                                    <WPFToolkit:TitledItem Title="Unit:" Margin="0,13,0,0" >
                                        <TextBox Text="{Binding unitType.name, Mode=OneWay}" IsReadOnly="True" ToolTip="equipment unit (trailer) type" />
                                    </WPFToolkit:TitledItem>
                                    <WPFToolkit:TitledItem Title="Vehicle" Margin="0,0,0,10" >
                                        <StackPanel>
                                            <WPFToolkit:TitledItem Title="Location:" >
                                                <TextBox Text="{Binding vehicleLocation.name, Mode=OneWay}" IsReadOnly="True" ToolTip="vehicle location" />
                                            </WPFToolkit:TitledItem>
                                            <WPFToolkit:TitledItem Title="Compartment:" >
                                                <!-- only valid if Location != trailer -->
                                                <TextBox Text="{Binding vehicleCompartment, Mode=OneWay}" IsReadOnly="True" />
                                            </WPFToolkit:TitledItem>
                                        </StackPanel>
                                    </WPFToolkit:TitledItem>
                                    <WPFToolkit:TitledItem Title="Count:" IsEnabled="False">
                                        <WPFToolkit:NumberBox Number="{Binding count}" IsReadOnly="True" />
                                    </WPFToolkit:TitledItem>

                                    <WPFToolkit:TitledItem Title="Weight:" IsEnabled="False">
                                        <DockPanel>
                                            <TextBox DockPanel.Dock="Right" Text="{Binding itemType.unitOfMeasure.name, Mode=OneWay}" IsReadOnly="True" ToolTip="unit of measure for weight" />
                                            <WPFToolkit:NumberBox Number="{Binding itemType.weight}" ToolTip="Weight of item per unit of measure" IsReadOnly="True"/>
                                        </DockPanel>
                                    </WPFToolkit:TitledItem>
                                    <WPFToolkit:TitledItem Title="Category:" IsEnabled="False">
                                        <TextBox Text="{Binding itemType.category.name, Mode=OneWay}" IsReadOnly="True" ToolTip="item category, purpose of item" />
                                    </WPFToolkit:TitledItem>
                                    <WPFToolkit:TitledItem Title="Batteries:" IsEnabled="False">
                                        <DockPanel>
                                            <TextBox DockPanel.Dock="Right" Text="{Binding itemType.batteryType.name, Mode=OneWay}" IsReadOnly="True" ToolTip="unit of measure for weight" />
                                            <!-- disabled if batteryType is None -->
                                            <WPFToolkit:NumberBox Number="{Binding itemType.batteryCount, Mode=OneWay}" IsReadOnly="True"
                                                              ToolTip="Count of batteries required, not used if battery type is None" NumberType="Int" />
                                        </DockPanel>
                                    </WPFToolkit:TitledItem>
                                    <WPFToolkit:TitledItem Title="Addons:" IsEnabled="False" ToolTip="additional items (not tracked separately) associated with this one">
                                        <TextBox Text="{Binding itemType.associatedItems, Mode=OneWay}" AcceptsReturn="True" AcceptsTab="True" MinLines="1" MaxLines="3" TextWrapping="Wrap" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.CanContentScroll="True" ScrollViewer.HorizontalScrollBarVisibility="Disabled" IsReadOnly="True" />
                                    </WPFToolkit:TitledItem>
                                    <WPFToolkit:TitledItem Title="Vendor:" IsEnabled="False">
                                        <TextBox Text="{Binding itemType.vendor.name, Mode=OneWay}" IsReadOnly="True" ToolTip="Vendor of this item, i.e. who purchased from" />
                                    </WPFToolkit:TitledItem>

                                    <WPFToolkit:TitledItem Title="Notes:" >
                                        <TextBox Text="{Binding notes, Mode=OneWay}" AcceptsReturn="True" AcceptsTab="True" MinLines="3" MaxLines="5" TextWrapping="Wrap" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.CanContentScroll="True" ScrollViewer.HorizontalScrollBarVisibility="Disabled" IsReadOnly="True" />
                                    </WPFToolkit:TitledItem>
                                </WPFToolkit:TitledItemsControl>
                            </ScrollViewer>
                        </GroupBox>
                    </Border>
                </Grid>
            </DockPanel>

            <GridSplitter Grid.Column="1" Grid.Row="0" HorizontalAlignment="Stretch" />

            <DockPanel Grid.Column="2" Grid.Row="0" Margin="5,2,2,3" DataContext="{Binding Details}" >
                <DockPanel DockPanel.Dock="Bottom" Margin="3">
                    <WrapPanel Orientation="Horizontal" HorizontalAlignment="Center" DockPanel.Dock="Bottom" Margin="0,7,0,5">
                        <WPFToolkit:SplitButton Content="Ser_vice"  Command="{Binding AddServiceDetailsCommand}" IsEnabled="{Binding IsCurrentItemEditable}" Width="80" Margin="10,0" >
                            <WPFToolkit:SplitButtonItem Content="Service" Command="{Binding AddServiceDetailsCommand}" />
                            <WPFToolkit:SplitButtonItem Content="Service History" Command="{Binding ViewServiceHistoryCommand}" />
                        </WPFToolkit:SplitButton>
                        <WPFToolkit:SplitButton Content="Deployment" Command="{Binding ViewDeployRecoverHistoryCommand}" IsEnabled="{Binding IsCurrentItemEditable}" Width="85" Margin="10,0" >
                            <WPFToolkit:SplitButtonItem CommandParameter="{Binding CurrentItem}" Command="{Binding DeployRecoverItemCommand}" Content="Deploy" />
                            <WPFToolkit:SplitButtonItem CommandParameter="{Binding CurrentItem}" Command="{Binding DeployRecoverItemCommand}" Content="Recover" />
                            <WPFToolkit:SplitButtonItem Content="Deployment History" Command="{Binding ViewDeployRecoverHistoryCommand}" />
                        </WPFToolkit:SplitButton>
                        <WPFToolkit:SplitButton Content="Dama_ged"  Command="{Binding AddDamagedDetailsCommand}" IsEnabled="{Binding IsCurrentItemEditable}" Width="80" Margin="10,0" >
                            <WPFToolkit:SplitButtonItem Content="Damaged" Command="{Binding AddDamagedDetailsCommand}" />
                            <WPFToolkit:SplitButtonItem Content="Missing" Command="{Binding AddMissingDetailsCommand}" />
                            <WPFToolkit:SplitButtonItem Content="Damaged/Missing History" Command="{Binding ViewDamagedMissingHistoryCommand}" />
                        </WPFToolkit:SplitButton>
                    </WrapPanel>

                    <Button x:Name="SaveButton" Margin="0,3" HorizontalAlignment="Center" VerticalAlignment="Center" Height="29" Width="80" Command="{Binding SaveCommand}" Content="_Save" />
                </DockPanel>
                <GroupBox BorderThickness="1" BorderBrush="Gray" Background="AliceBlue" MinWidth="50">
                    <GroupBox.Header>
                        <Border Padding="3" CornerRadius="5" BorderThickness="1" BorderBrush="LightGray" SnapsToDevicePixels="True" Background="White">
                            <TextBox Background="Transparent" BorderThickness="0" ToolTip="Identifies this unique item instance" IsReadOnly="True">
                                <TextBox.Style>
                                    <Style TargetType="{x:Type TextBox}">
                                        <Setter Property="Text" Value="{Binding itemNumber, Mode=OneWay}"/>
                                        <Setter Property="BorderThickness" Value="0" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding CurrentItem}" Value="{x:Null}">
                                                <Setter Property="Text" Value="No item selected"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>
                        </Border>
                    </GroupBox.Header>
                    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                        <DockPanel DockPanel.Dock="Bottom" Margin="3">
                            <WPFToolkit:TitledItemsControl Margin="2,10,2,2" x:Name="DetailView" >
                                <WPFToolkit:TitledItem Title="DB key:" Visibility="{Binding IsDebugMode, Converter={StaticResource BooleanToVisibilityConverter}}" >
                                    <TextBox Text="{Binding guid}" IsReadOnly="True" IsEnabled="{Binding IsCurrentItemEditable}" ToolTip="Globally Unique Identifier, primary key for database (read-only)" Visibility="Visible" />
                                    <!-- normally Collapsed except when debugging -->
                                </WPFToolkit:TitledItem>
                                <WPFToolkit:TitledItem Title="Item:">
                                    <DockPanel>
                                        <Button DockPanel.Dock="Right" Content="_Edit Item" ToolTip="Shortcut to open Item Management window" Command="{Binding OpenEditItemWindowCommand}" Visibility="{Binding IsAdmin, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                        <TextBox x:Name="tbName" Text="{Binding item.itemType.name, Mode=OneWay}" IsReadOnly="True" ToolTip="Identifies what the item is" />
                                    </DockPanel>
                                </WPFToolkit:TitledItem>
                                <WPFToolkit:TitledItem Title="Site:">
                                    <TextBox Text="{Binding siteLocation.name}" IsReadOnly="True"  ToolTip="Where this item is (the site of the equipment)" />
                                </WPFToolkit:TitledItem>
                                <WPFToolkit:TitledItem Title="Status:" IsEnabled="{Binding IsCurrentItemEditable}" Margin="0 0 0 20">
                                    <TextBox Text="{Binding status.name,Mode=OneWay}" ToolTip="Select status" IsReadOnly="True" />
                                    <!-- 
                                    <ComboBox x:Name="StatusFilter" DisplayMemberPath="name" ItemsSource="{Binding Path=DataContext.SearchFilterOptions.SearchFilter.ItemStatusValues, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" SelectedItem="{Binding status}" ToolTip="Select status" />
                                    -->
                                </WPFToolkit:TitledItem>
                                <WPFToolkit:TitledItem Title="Restock:" IsEnabled="False">
                                    <StackPanel Orientation="Horizontal" IsEnabled="False">
                                        <RadioButton IsChecked="{Binding item.itemType.expirationRestockCategory, Converter={StaticResource enumToBooleanConverter}, 
                                                 ConverterParameter={x:Static inventoryModel:ExpirationCategory.None}}" Content="None - no expiration" />
                                        <RadioButton IsChecked="{Binding item.itemType.expirationRestockCategory, Converter={StaticResource enumToBooleanConverter}, 
                                                 ConverterParameter={x:Static inventoryModel:ExpirationCategory.AnnualRestock}}" Content="Annual" 
                                                 Margin="20,0" />
                                        <RadioButton IsChecked="{Binding item.itemType.expirationRestockCategory, Converter={StaticResource enumToBooleanConverter}, 
                                                 ConverterParameter={x:Static inventoryModel:ExpirationCategory.DateSpecificRestock}}" Content="By specific date" />
                                    </StackPanel>
                                </WPFToolkit:TitledItem>
                                <WPFToolkit:TitledItem Title="Expiration:" >
                                    <DatePicker SelectedDate="{Binding item.expirationDate, Mode=OneWay}" IsTodayHighlighted="True" SelectedDateFormat="Long" IsEnabled="False" />
                                </WPFToolkit:TitledItem>
                                <WPFToolkit:TitledItem Title="Serial #:" IsEnabled="{Binding CanHaveSerialNumber}"  Margin="0 20 0 0">
                                    <TextBox Text="{Binding serialNumber, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Serial # or other unique identifier for this item (usually blank)" />
                                </WPFToolkit:TitledItem>
                                <WPFToolkit:TitledItem Title="Grant #:" IsEnabled="{Binding IsCurrentItemEditable}">
                                    <TextBox Text="{Binding grantNumber, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Information to match item with a grant associated with this item" />
                                </WPFToolkit:TitledItem>
                                <WPFToolkit:TitledItem Title="In Service:" IsEnabled="{Binding IsCurrentItemEditable}"  Margin="0 20 0 0">
                                    <DatePicker SelectedDate="{Binding inServiceDate, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" IsTodayHighlighted="True" SelectedDateFormat="Short" />
                                </WPFToolkit:TitledItem>
                                <WPFToolkit:TitledItem Title="Removed:" IsEnabled="{Binding HasRemovedFromServiceDate}" ToolTip="The date item was removed from service, should be left blank if still in service">
                                    <DatePicker Text="{Binding removedServiceDate, Mode=TwoWay, Converter={StaticResource NullableToEmptyStringConverter}}" IsTodayHighlighted="True" SelectedDateFormat="Long" />
                                </WPFToolkit:TitledItem>
                                <WPFToolkit:TitledItem Title="Seal Broken:" IsEnabled="{Binding IsCurrentItemEditable}">
                                    <CheckBox VerticalAlignment="Center" IsChecked="{Binding isSealBroken}" />
                                </WPFToolkit:TitledItem>
                                <WPFToolkit:TitledItem Title="Has Barcode:" IsEnabled="{Binding IsCurrentItemEditable}" ToolTip="Barcode has been printed / barcode is affixed to item">
                                    <DockPanel>
                                        <Button DockPanel.Dock="Right" Content="Print Barcode Label" ToolTip="Shortcut to open View Print Labels window" Command="{Binding OpenPrintBarcodeWindowCommand}" />
                                        <CheckBox VerticalAlignment="Center" IsChecked="{Binding hasBarcode}" />
                                    </DockPanel>
                                </WPFToolkit:TitledItem>
                                <WPFToolkit:TitledItem Title="Notes:" IsEnabled="{Binding IsCurrentItemEditable}">
                                    <TextBox Text="{Binding notes}" AcceptsReturn="True" AcceptsTab="True" MinLines="3" MaxLines="5" TextWrapping="Wrap" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.CanContentScroll="True" ScrollViewer.HorizontalScrollBarVisibility="Disabled" />
                                    <!-- xml:lang="en-US" SpellCheck.IsEnabled="True" Note:MS implementation throws Exceptions but works with Win7/Net4 and possibly others -->
                                </WPFToolkit:TitledItem>
                            </WPFToolkit:TitledItemsControl>
                        </DockPanel>
                    </ScrollViewer>
                </GroupBox>
            </DockPanel>
        </Grid>
    </DockPanel>
</views:BasicWindowBase>
